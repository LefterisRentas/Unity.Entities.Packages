//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/MOBA/Input/MobaInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MobaInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MobaInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MobaInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""71c41ec7-0b8a-41e6-b06b-413badb961a3"",
            ""actions"": [
                {
                    ""name"": ""SelectMovePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9f7a7a60-b62a-4389-87d3-4adccac4351d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AoeAbility"",
                    ""type"": ""Button"",
                    ""id"": ""1cf61813-05cc-4d1b-8f39-eab666061506"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillShotAbility"",
                    ""type"": ""Button"",
                    ""id"": ""d36b5add-57f2-4e2a-b24c-1a41b7867dfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmSkillShotAbility"",
                    ""type"": ""Button"",
                    ""id"": ""03bc124a-629f-4249-8fd8-46bbba9104b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73c629b7-24e5-4866-8886-9f85605cc06c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AoeAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8621272b-95ac-48bb-82b0-d08b98f83e64"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillShotAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73d7164f-2640-4731-baaf-26879f4d902e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmSkillShotAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Move"",
                    ""id"": ""7635879f-dac9-4827-8d73-7626e4f5e59d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMovePosition"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3fe32336-bd5f-4247-9b53-91823bafdd0e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMovePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""08831c9d-1f24-4697-90ef-0f3441c11804"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMovePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8361fda5-0bac-4dd8-8f59-363a1a674203"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMovePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88b23820-35cf-4590-97be-4308c363562e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMovePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_SelectMovePosition = m_Gameplay.FindAction("SelectMovePosition", throwIfNotFound: true);
        m_Gameplay_AoeAbility = m_Gameplay.FindAction("AoeAbility", throwIfNotFound: true);
        m_Gameplay_SkillShotAbility = m_Gameplay.FindAction("SkillShotAbility", throwIfNotFound: true);
        m_Gameplay_ConfirmSkillShotAbility = m_Gameplay.FindAction("ConfirmSkillShotAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_SelectMovePosition;
    private readonly InputAction m_Gameplay_AoeAbility;
    private readonly InputAction m_Gameplay_SkillShotAbility;
    private readonly InputAction m_Gameplay_ConfirmSkillShotAbility;
    public struct GameplayActions
    {
        private @MobaInputActions m_Wrapper;
        public GameplayActions(@MobaInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectMovePosition => m_Wrapper.m_Gameplay_SelectMovePosition;
        public InputAction @AoeAbility => m_Wrapper.m_Gameplay_AoeAbility;
        public InputAction @SkillShotAbility => m_Wrapper.m_Gameplay_SkillShotAbility;
        public InputAction @ConfirmSkillShotAbility => m_Wrapper.m_Gameplay_ConfirmSkillShotAbility;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @SelectMovePosition.started += instance.OnSelectMovePosition;
            @SelectMovePosition.performed += instance.OnSelectMovePosition;
            @SelectMovePosition.canceled += instance.OnSelectMovePosition;
            @AoeAbility.started += instance.OnAoeAbility;
            @AoeAbility.performed += instance.OnAoeAbility;
            @AoeAbility.canceled += instance.OnAoeAbility;
            @SkillShotAbility.started += instance.OnSkillShotAbility;
            @SkillShotAbility.performed += instance.OnSkillShotAbility;
            @SkillShotAbility.canceled += instance.OnSkillShotAbility;
            @ConfirmSkillShotAbility.started += instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.performed += instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.canceled += instance.OnConfirmSkillShotAbility;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @SelectMovePosition.started -= instance.OnSelectMovePosition;
            @SelectMovePosition.performed -= instance.OnSelectMovePosition;
            @SelectMovePosition.canceled -= instance.OnSelectMovePosition;
            @AoeAbility.started -= instance.OnAoeAbility;
            @AoeAbility.performed -= instance.OnAoeAbility;
            @AoeAbility.canceled -= instance.OnAoeAbility;
            @SkillShotAbility.started -= instance.OnSkillShotAbility;
            @SkillShotAbility.performed -= instance.OnSkillShotAbility;
            @SkillShotAbility.canceled -= instance.OnSkillShotAbility;
            @ConfirmSkillShotAbility.started -= instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.performed -= instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.canceled -= instance.OnConfirmSkillShotAbility;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnSelectMovePosition(InputAction.CallbackContext context);
        void OnAoeAbility(InputAction.CallbackContext context);
        void OnSkillShotAbility(InputAction.CallbackContext context);
        void OnConfirmSkillShotAbility(InputAction.CallbackContext context);
    }
}
